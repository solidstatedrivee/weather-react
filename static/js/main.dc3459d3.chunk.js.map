{"version":3,"sources":["hooks/useScript.js","App.js","reportWebVitals.js","index.js"],"names":["useScript","url","useEffect","script","document","createElement","src","crossOrigin","body","appendChild","removeChild","api","Modal","setAppElement","App","useState","query","setQuery","weather","setWeather","modalState","setModalState","className","main","param","param2","renderSwitchBG","icon","class","type","placeholder","onChange","e","target","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","onClick","isOpen","onRequestClose","style","content","color","background","border","overlay","portalClassName","closeTimeoutMS","name","sys","country","d","date","getDate","dateBuilder","Date","day","getDay","dayBuilder","month","getMonth","monthBuilder","year","getFullYear","yearBuilder","Math","round","temp","temp_max","temp_min","feels_like","renderSwitchIcons","description","humidity","visibility","wind","speed","gust","deg","pressure","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.dc3459d3.chunk.js","sourcesContent":["import { useEffect } from 'react';\r\n\r\nconst useScript = url => {\r\n    useEffect(() => {\r\n        const script = document.createElement('script');\r\n\r\n        script.src = url;\r\n        script.crossOrigin = 'anonymous';\r\n\r\n        document.body.appendChild(script);\r\n        return () => {\r\n            document.body.removeChild(script);\r\n        }\r\n    }, [url])\r\n}\r\n\r\nexport default useScript;","import React, { useState } from 'react';\nimport Modal from 'react-modal';\nimport './index.css';\nimport useScript from './hooks/useScript';\n\n// OpenWeatherMap API key and base URL used to access weather data\nconst api = {\n  key: 'cdfe7478940cccfc912420af1e679582',\n  base: 'https://api.openweathermap.org/data/2.5/'\n}\n\nModal.setAppElement('#root');\n\n\nfunction App() {\n  useScript('https://kit.fontawesome.com/875b1b7961.js'); //external script to load icons\n\n  const [query, setQuery] = useState(''); // used to reset search bar when search is complete\n  const [weather, setWeather] = useState({}); // weather variable that will hold json data related to weather data\n  const [modalState, setModalState] = useState(false);\n  // when enter is hit in the search bar fetch the URL, grab the json file returned by the API, \n  //and set the weather variable to equal json result\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=imperial&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setQuery('');\n          setWeather(result);\n          console.log(result);\n        });\n    }\n  }\n\n  // return weather-related icons based on weather conditions\n  let renderSwitchIcons = (param, param2) => {\n    switch (param) {\n      case 'Thunderstorm':\n        return 'fas fa-thunderstorm';\n      case 'Drizzle':\n        return 'fas fa-cloud-drizzle';\n      case 'Rain':\n        return 'fas fa-cloud-rain';\n      case 'Snow':\n        return 'fas fa-cloud-snow';\n      case 'Fog':\n        return 'fas fa-fog';\n      case 'Tornado':\n        return 'fas fa-tornado';\n      case 'Clear':\n        switch (param2) {\n          case ('01d'):\n            return 'fas fa-sun';\n          case ('01n'):\n            return 'fas fa-moon-stars';\n        }\n      case 'Clouds':\n        return 'fas fa-clouds';\n      case 'Haze':\n        return 'far fa-sun-haze'\n    }\n  }\n\n  // return weather-related backgrounds based on weather conditions\n  let renderSwitchBG = (param, param2) => {\n    switch (param) {\n      case 'Thunderstorm':\n        return 'App App-thunderstorm';\n      case 'Drizzle':\n        return 'App App-drizzle';\n      case 'Rain':\n        switch (param2) {\n          case ('09n'):\n            return 'App App-rain-night';\n          case ('10n'):\n            return 'App App-rain-night';\n          default:\n            return 'App App-rain';\n        }\n      case 'Snow':\n        return 'App App-snow';\n      case 'Fog':\n        return 'App App-fog';\n      case 'Tornado':\n        return 'App App-tornado';\n      case 'Clear':\n        switch (param2) {\n          case ('01d'):\n            return 'App App-clear';\n          case ('01n'):\n            return 'App App-clear-night';\n        }\n      case 'Clouds':\n        switch (param2) {\n          case ('02d'):\n            return 'App App-cloudy';\n          case ('03d'):\n            return 'App App-cloudy';\n          case ('04d'):\n            return 'App App-cloudy';\n          case ('02n'):\n            return 'App App-cloudy-night';\n          case ('03n'):\n            return 'App App-cloudy-night';\n          case ('04n'):\n            return 'App App-cloudy-night';\n        }\n      case 'Haze':\n        return 'App App-haze'\n    }\n\n  }\n\n  // uses values returned by getSomething() as the index of the corresponding array\n  // ex. if today is tuesday, getDate() will return 2 which we can use as index(n) which n is the day of the week. \n  // n == 2 == Tuesday\n  // n == 3 == Wednesday\n  // etc\n  const dayBuilder = d => {\n    let days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday',\n      'Thursday', 'Friday', 'Saturday'];\n    let day = days[d.getDay()];\n\n    return `${day}`\n\n  }\n  const dateBuilder = (d) => {\n    let date = d.getDate();\n\n    return `${date}`\n  }\n  const monthBuilder = d => {\n    let months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August',\n      'September', 'October', 'November', 'December'];\n    let month = months[d.getMonth()];\n\n    return `${month}`\n\n  }\n  const yearBuilder = d => {\n    let year = d.getFullYear();\n\n    return `${year}`\n  }\n\n  const customStyles = {\n    content: {\n      color: 'rgb(230,230,230)',\n      background: 'rgb(50,50,50)',\n      border: '1px solid rgb(230,230,230)'\n    },\n    overlay: {\n      background: 'rgb(25,25,25)'\n    }\n  }\n\n  return (\n\n    <div className={typeof weather.main != 'undefined' ? renderSwitchBG(weather.weather[0].main, weather.weather[0].icon) : 'App'}> {/* return class name based on weather.main returned by json */}\n      <main>\n        <div className=\"search-box\">\n          <i class=\"far fa-search\"></i>\n          {/* When a change occurs with search box set the value to current state */}\n          <input\n            type=\"text\"\n            className='search-bar'\n            placeholder='Denver, Colorado'\n            onChange={e => setQuery(e.target.value)}\n            value={query}\n            onKeyPress={search} />\n          <i class=\"far fa-bars\" onClick={() => setModalState(true)}></i>\n\n        </div>\n        <Modal\n          isOpen={modalState}\n          onRequestClose={() => setModalState(false)}\n          style={customStyles}\n          portalClassName='portalClass'\n          closeTimeoutMS={250}\n        >\n          <h1 className='modal-title'>Social</h1>\n          <ul className='social-links-container'>\n            <li className='social-link'>Instagram</li>\n            <li className='social-link'>Facebook</li>\n            <li className='social-link'>Twitter</li>\n            <li className='social-link'>TikTok</li>\n          </ul>\n          <div className='close-modal' onClick={() => setModalState(false)}>[X] Close</div>\n        </Modal>\n\n        {/* if weather.main is not undefined then render the weather info otherwise render an empty value.\n           This is so the app doesn't initially load with weather info */}\n        {(typeof weather.main != 'undefined') ? (\n          <div>\n            <div className=\"location-container\">\n              <div className=\"location-icon\"><i class=\"fal fa-map-marker-alt\"></i></div>\n              <div className=\"location-info\">\n                <div className=\"location\">{weather.name}, </div>\n                <div className=\"location-country\">{weather.sys.country}</div>\n              </div>\n            </div>\n            <div className=\"date-container\">\n              <div className=\"date-date\">{dateBuilder(new Date())}</div>\n              <div className=\"date-day\">{dayBuilder(new Date())}</div>\n              <div className=\"date-month\">{monthBuilder(new Date())}</div>\n              <div className=\"date-year\">{yearBuilder(new Date())}</div>\n            </div>\n            <div className=\"temp-container\">\n              <div className=\"container-title\">Temperature</div>\n              <div className=\"icon-current-container\">\n                <i class=\"far fa-thermometer-half\"></i>\n                <div className=\"current-temp\">{Math.round(weather.main.temp)}°</div>\n              </div>\n              <div className=\"high-low-container\">\n                <div className=\"temp-high\">High: {Math.round(weather.main.temp_max)}°</div>\n                <div className=\"temp-low\">Low: {Math.round(weather.main.temp_min)}°</div>\n              </div>\n              <div className=\"feels-like\">Feels like: {Math.round(weather.main.feels_like)}°</div>\n            </div>\n            <div className=\"conditions-container\">\n              <div className=\"container-title\">Conditions</div>\n              <div className=\"conditions-icon\"><i className={renderSwitchIcons(weather.weather[0].main, weather.weather[0].icon)}></i></div>\n              <div className=\"conditions-description\">{weather.weather[0].description}</div>\n              <div className=\"humidity-visibility-container\">\n                <div className=\"humidity\">Humidity: {weather.main.humidity}%</div>\n                <div> | </div>\n                <div className=\"visibility\">Visibility: {Math.round((weather.visibility) * .0006)} mi</div>\n              </div>\n              <div className=\"hv-wind-divider\"></div>\n              <div className=\"wind-container\">\n                <div className=\"wind-icon\">\n                  <i class=\"far fa-wind\"></i>\n                </div>\n                <div className=\"wind-title\">Wind</div>\n\n              </div>\n              <div className=\"deg-gust-speed-container\">\n                <div className=\"wind-speed\">Wind Speed: {Math.round(weather.wind.speed * 2.23)} mph</div>\n                <div className='dgs-divider'> | </div>\n                <div className=\"gust\">Gust Speed: {Math.round(weather.wind.gust * 2.23)} mph</div>\n                <div className='dgs-divider'> | </div>\n                <div className=\"wind-degree\">Direction: {weather.wind.deg}°</div>\n\n              </div>\n              <div className=\"pressure\">Pressure: {Math.round(weather.main.pressure * .03)} inHg</div>\n            </div>\n          </div>\n        ) : (\n          <div className=\"title-section\">\n            <h1 className='title'>React.js Weather App</h1>\n          </div>\n        )}\n\n      </main>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}